name: 'Terraform Multi-Cloud CI/CD'

on:
  workflow_dispatch:
    inputs:
      provider:
        description: 'Cloud Provider to run on (aws, azure, gcp)'
        required: true
        default: 'aws'
        type: choice
        options:
        - aws
        - azure
        - gcp

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    environment: 
      name: >-
        ${{ 
          github.event.inputs.provider == 'aws' && 'AWS' ||
          github.event.inputs.provider == 'azure' && 'Azure' ||
          github.event.inputs.provider == 'gcp' && 'GCP' ||
          'default' 
        }} # Fallback in case of unexpected input
    
    permissions:
      id-token: write 
      contents: read  
    
    env:
      TF_VAR_aws_region: us-east-1
      TF_VAR_s3_bucket_name: my-unique-s3-bucket-${{ github.run_id }}-${{ github.run_number }}
      
      TF_VAR_azure_location: East US
      TF_VAR_resource_group_name: my-multi-cloud-rg
      # --- IMPORTANT: UPDATED STORAGE ACCOUNT NAME TO USE run_number FOR SHORTER LENGTH ---
      TF_VAR_storage_account_name: mymulticloudsa${{ github.run_number }} # Ensures name is under 24 characters
      # ----------------------------------------------------------------------------------
      TF_VAR_storage_container_name: mycontainer-${{ github.run_number }}
      
      TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      # --- IMPORTANT: UPDATED GCS BUCKET NAME TO USE run_number FOR CONSISTENCY/POTENTIAL LENGTH ISSUES ---
      TF_VAR_gcs_bucket_name: my-unique-gcs-bucket-${{ github.run_number }} # Simplified for potential length
      # --------------------------------------------------------------------------------------------------
      TF_VAR_gcs_location: US-EAST1
      TF_VAR_gcp_region: us-central1 


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Debug AWS Secret Presence
        if: github.event.inputs.provider == 'aws'
        run: |
          echo "Checking AWS secrets before credential configuration:"
          echo "AWS_ACCESS_KEY_ID present: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
          echo "AWS_SECRET_ACCESS_KEY present: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
        # IMPORTANT: DO NOT echo the actual secret values, only check for presence

      - name: Configure AWS Credentials
        if: github.event.inputs.provider == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_VAR_aws_region }}
        
      - name: Authenticate Azure
        if: github.event.inputs.provider == 'azure'
        uses: azure/login@v1
        with:
          creds: >-
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }
        
      - name: Authenticate GCP
        if: github.event.inputs.provider == 'gcp'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Terraform Init and Plan
        id: plan
        run: |
          terraform -chdir="./providers/${{ github.event.inputs.provider }}" init
          terraform -chdir="./providers/${{ github.event.inputs.provider }}" validate
          terraform -chdir="./providers/${{ github.event.inputs.provider }}" plan -out=tfplan
          echo "Terraform plan generated successfully."
          
      - name: Terraform Apply
        run: |
          terraform -chdir="./providers/${{ github.event.inputs.provider }}" apply -auto-approve tfplan
          echo "Terraform apply completed."
