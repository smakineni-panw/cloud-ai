name: 'Terraform Multi-Cloud CI/CD'

on:
  workflow_dispatch:
    inputs:
      provider:
        description: 'Cloud Provider to run on (aws, azure, gcp)'
        required: true
        default: 'aws'
        type: choice
        options:
        - aws
        - azure
        - gcp

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    # --- IMPORTANT: UPDATED ENVIRONMENT BLOCK FOR CASE SENSITIVITY ---
    # Dynamically set environment based on selected provider, matching the exact case of GitHub Environments
    environment: 
      name: >-
        ${{ 
          github.event.inputs.provider == 'aws' && 'AWS' ||
          github.event.inputs.provider == 'azure' && 'Azure' ||
          github.event.inputs.provider == 'gcp' && 'GCP' ||
          'default' # Fallback in case of unexpected input
        }}
    # -----------------------------------------------------------------
    
    # --- IMPORTANT: ADD THESE PERMISSIONS ---
    permissions:
      id-token: write # Crucial for OIDC-based authentication (AWS, GCP)
      contents: read  # Required for checkout action
      # If you were using "deployment_status" or other specific permissions, add them here.
    # ----------------------------------------
    
    env:
      TF_VAR_aws_region: us-east-1
      TF_VAR_s3_bucket_name: my-unique-s3-bucket-${{ github.run_id }}-${{ github.run_number }}
      
      TF_VAR_azure_location: East US
      TF_VAR_resource_group_name: my-multi-cloud-rg
      TF_VAR_storage_account_name: mymulticloudsa${{ github.run_id }}
      TF_VAR_storage_container_name: mycontainer-${{ github.run_number }}
      
      TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }} # This will now be pulled from the selected environment
      TF_VAR_gcs_bucket_name: my-unique-gcs-bucket-${{ github.run_id }}-${{ github.run_number }}
      TF_VAR_gcs_location: US-EAST1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Configure AWS Credentials
        if: github.event.inputs.provider == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_VAR_aws_region }}
        
      - name: Authenticate Azure
        if: github.event.inputs.provider == 'azure'
        run: |
          sudo apt-get update && sudo apt-get install -y azure-cli
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          echo "Azure authentication successful."
        
      - name: Authenticate GCP
        if: github.event.inputs.provider == 'gcp'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Terraform Init and Plan
        id: plan
        run: |
          export TF_LOG=DEBUG # Keep this for now for more verbose debugging
          terraform -chdir="./providers/${{ github.event.inputs.provider }}" init
          terraform -chdir="./providers/${{ github.event.inputs.provider }}" validate
          terraform -chdir="./providers/${{ github.event.inputs.provider }}" plan -out=tfplan
          echo "Terraform plan generated successfully."
          
      - name: Terraform Apply
        run: |
          terraform -chdir="./providers/${{ github.event.inputs.provider }}" apply -auto-approve tfplan
          echo "Terraform apply completed."
